version: '3.1'

name: "ramlich"

services:
  zk:
    image: "confluentinc/cp-zookeeper:latest"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - 32181
    ports:
      - 32181:32181
    extra_hosts:
      - "moby:127.0.0.1"

  kafka:
    image: "confluentinc/cp-kafka:latest"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zk:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka
    expose:
      - 29092
      - 9092
    ports:
      - 29092:29092
      - 9092:9092
    depends_on:
      - zk
    extra_hosts:
      - "host.docker.internal:host-gateway"
    links:
      - zk
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

  schema:
    image: "confluentinc/cp-schema-registry:latest"
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema
      SCHEMA_REGISTRY_LISTENERS: http://schema:28081
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 28081:28081
    links:
      - kafka
      - zk

  kafka-ui:
    logging:
      driver: "json-file"
      options:
        max-file: "1"
        max-size: "5m"
    image: provectuslabs/kafka-ui
    ports:
      - "8282:8080"
    restart: always

  postgresql:
    image: "postgres"
    volumes:
      - ./scripts/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "ramlich", "-d", "ramlich" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  unleashserver:
    image: unleashorg/unleash-server:latest
    ports:
      - "4242:4242"
    restart: on-failure
    environment:
      # This points Unleash to its backing database (defined in the `db` section below)
      DATABASE_URL: "postgres://ramlich:ramlich@postgresql/unleash"
      # Disable SSL for database connections. @chriswk: why do we do this?
      DATABASE_SSL: "false"
      # Changing log levels:
      LOG_LEVEL: "warn"
      # Proxy clients must use one of these keys to connect to the
      # Proxy. To add more keys, separate them with a comma (`key1,key2`).
      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
      # Initialize Unleash with a default set of client API tokens. To
      # initialize Unleash with multiple tokens, separate them with a
      # comma (`token1,token2`).
      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"
    depends_on:
      postgresql:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s

  apiserver:
    image: ramlich:latest
    build:
      dockerfile: Dockerfile
    ports:
      - "8181:8181"
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
      unleashserver:
        condition: service_healthy
    links:
      - kafka
      - schema
      - unleashserver
    environment:
      RUST_BROKERS: kafka:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      RUST_UNLEASH_API_URL: http://unleashserver:4242/api/
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8181/healthcheck || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s

  event_consumer:
    image: ramlich_consumer:latest
    build:
      dockerfile: consumer.Dockerfile
    ports:
      - "8585:8585"
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    links:
      - kafka
      - schema
      - postgresql
    environment:
      RUST_BROKERS: kafka:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      RUST_UNLEASH_API_URL: http://unleashserver:4242/api/
      RUST_DB_HOST: postgresql
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8585/healthcheck || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s
